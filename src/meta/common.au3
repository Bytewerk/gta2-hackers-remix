#include <WinAPI.au3>
#include <Constants.au3>

; Constants (see also: http://git.io/g2hr-0.3.2-network-ui-constants )
Global Const $GTA2_PLAYER_COUNT = 6
Global Const $GTA2_LOBBY_CTRL_START = 1021
Global Const $GTA2_LOBBY_CTRL_LIST  = 1024
Global Const $GTA2_GAME_WINDOW_DESC = "[TITLE:GTA2;CLASS:WinMain]"
Global Const $WINE = is_running_in_wine()
Global Const $HWND_SDL_DESC = "[TITLE:GTA2: HACKER'S REMIX;CLASS:SDL_app]"
Global $HWND_SDL ; gets filled by startup()
Global $global_fullscreen = false

; Global variables
Global $global_sock


; This gets generated by SDL2 in the menu and has a trailing slash.
; The menu sends this as soon, as the meta component connects.
Global $global_config_path = NULL

Global $global_game_instances_open = 0
Global $global_game_process_ids[$GTA2_PLAYER_COUNT]
Global $global_game_screen_layouts[$GTA2_PLAYER_COUNT]

; Initialize Arrayss
For $i=0 To $GTA2_PLAYER_COUNT-1
	$global_game_process_ids[$i] = 0
Next

; Zero-terminated string reply to the server
Func re($message)
	TCPSend($global_sock, $message & Chr(0))
Endfunc

Func status($message)
	re("STATUS " & $message)
	ConsoleWrite("STATUS: " & $message & @CRLF)
Endfunc

Func send_pid_table()
	Local $str = "PID_TABLE"
	For $i=0 To $GTA2_PLAYER_COUNT - 1
		$str &= " " & $global_game_process_ids[$i]
	Next
	re($str)
Endfunc


; Return values:
; 		$ret[0]: count of hwnds
; 		$ret[1]: first hwnd
; 		...
Func get_all_hwnds_from_pid($pid, $desc = "")
	Local $list = WinList($desc)
	Local $ret[1]
	$ret[0] = 0
	
	For $i = 1 To $list[0][0]
	
		Local $hwnd = $list[$i][1]
		
		If WinGetProcess($hwnd) == $pid Then
			_ArrayAdd($ret, $hwnd)
			$ret[0] += 1
		Endif
	Next
	
	Return $ret
Endfunc

Func find_hwnd_with_control($hwnds, $ctrl_id)
	For $i=1 To $hwnds[0]
		If ControlCommand($hwnds[$i], "", $ctrl_id, "IsEnabled") Then
			Return $hwnds[$i]
		Endif
	Next
	
	Return Null
Endfunc

Func wait_for_hwnd_with_desc($pid, $desc)
	While True
		Local $hwnds = get_all_hwnds_from_pid($pid, $desc)
		If $hwnds[0] > 0 Then _
			Return $hwnds[1]
	
		Sleep(100)
	Wend
Endfunc

; Returns the single hwnd id that is left
Func wait_until_only_one_hwnd_left($pid)
	While True
		Local $hwnds = get_all_hwnds_from_pid($pid)
		
		If IsArray($hwnds) And $hwnds[0] == 1 Then _
			Return $hwnds[1]
		
		
		Sleep(100)
	Wend
Endfunc

Func move_until_it_works($hwnd, $geo)
	; WinGetPos doesn't work here (because the window isn't visible
	; yet?). However, these functions do work. We measure the window-
	; border to put it off-screen.
	Local $current_width = _WinAPI_GetWindowWidth($hwnd)
	Local $current_height = _WinAPI_GetWindowHeight($hwnd)
	
	; left, bottom, right
	Local $border_lbr = ($current_width - $geo[2]) / 2
	Local $border_top = $current_height - $geo[3] - $border_lbr
	
	Local $x = $geo[0] - $border_lbr
	Local $y = $geo[1] - $border_top
	
	; ConsoleWrite("x: " & $x & ", y: " & $y & @CRLF)
	
	; FIXME: this doesn't work as expected in wine (top offset ignored?)
	_WinAPI_SetWindowPos($hwnd, $HWND_TOP, $x, $y, $current_width, _
		$current_height, $SWP_NOSIZE)
Endfunc

Func regwrite_if_empty($keyname, $valuename, $type, $value)
	RegRead($keyname, $valuename)
	If @Error Then _
		RegWrite($keyname, $valuename, $type, $value)
EndFunc

Func is_running_in_wine()
	RegRead("HKEY_CURRENT_USER\Software\Wine", "")
	If @error > 0 Then Return False
	Return True
EndFunc


; Credits to SmOke_N from autoit forums for this function:
; http://www.autoitscript.com/forum/topic/126916-cant-hide-start-button/?p=880773
Func taskbar_hide($f_hide = False)
    Local $h_task = WinGetHandle("[CLASS:Shell_TrayWnd]")
    If Not $h_task Then Return SetError(1, 0, 0)

    Local $h_start = 0
    Local $a_wlist = WinList("[CLASS:Button]")
    If Not IsArray($a_wlist) Then Return SetError(2, 0, 0)

    For $iwin = 1 To $a_wlist[0][0]
        If _WinAPI_GetParent($a_wlist[$iwin][1]) = $h_task Then
            $h_start = $a_wlist[$iwin][1]
            ExitLoop
        EndIf
    Next

    If Not $h_start Then Return SetError(3, 0, 0)

    If $f_hide Then
        _WinAPI_ShowWindow($h_start, @SW_HIDE)
        _WinAPI_ShowWindow($h_task, @SW_HIDE)
    Else
        _WinAPI_ShowWindow($h_start, @SW_SHOW)
        _WinAPI_ShowWindow($h_task, @SW_SHOW)
    EndIf
EndFunc


Func hide_taskbar_when_menu_focused()
	If Not $WINE And $global_fullscreen Then
		taskbar_hide(WinActive($HWND_SDL))
	Endif
Endfunc

